Addition using Strings		

		Vector<Integer> arr=new Vector<>();
		Integer i=input1.length()-1,j=input2.length()-1,temp,carry=0;
		while(i>=0 && j>=0)
		{
          temp=(input1.charAt(i)-48)+(input2.charAt(j)-48)+carry;
		  if(temp>=10)
		  {
			  carry=1;
			  temp=temp%10;
		  }
		  else{carry=0;}
		  arr.add(temp);
		  i-=1;
		  j-=1;
		}
		while(i>=0)
		{
          temp=(input1.charAt(i)-48)+carry;
		  if(temp>=10)
		  {
			  carry=1;
			  temp=temp%10;
		  }
		  else{carry=0;}
		  arr.add(temp);
		  i-=1;
		}
		while(j>=0)
		{
          temp=(input2.charAt(j)-48)+carry;
		  if(temp>=10)
		  {
			  carry=1;
			  temp=temp%10;
		  }
		  else{carry=0;}
		  arr.add(temp);
		  j-=1;
		}
		if(carry==1)
		{
			arr.add(1);
		}
		String s="";
		for(int k=arr.size()-1;k>=0;k--)
		{
           s+=String.valueOf(arr.get(k));
		}
		return s;

		(or)
		import java.math.BigInteger;
		BigInteger i1=new BigInteger(input1);
		BigInteger i2=new BigInteger(input2);
		return String.valueOf(i1.add(i2));
--------------------------------------------------------------------------------------
Get code through strings


        String arr[]=input1.split(" ");
		int len=0;
		for(String i:arr)
		{
			len+=i.length();
		}
		int s;
		while(len/10!=0)
		{
             s=0;
			 while(len>0)
			 {
				 s+=len%10;
				 len=len/10;
			 }
			 len=s;
		}
		return len;
--------------------------------------------------------------------------------------------
Find string code


  	   String arr[]=input1.split(" ");
	   Vector<Integer> v=new Vector<>();
	   int i,j;
	   int h1=0;
	   Integer temp;
	   for(String s:arr)
	   {
		   s=s.trim();
		   s=s.toUpperCase();
		   i=0;j=s.length()-1;
		   temp=0;
		   while(i<j)
		   {
			   h1=(s.charAt(i)-64)-(s.charAt(j)-64);
			   if(h1<0){h1*=-1;}
			   temp+=h1;
			   i+=1;
			   j-=1;
		   }
		   int in=s.length()/2;
		   if(s.length()%2!=0){temp+=s.charAt(in)-64;}
		   v.add(temp);
	   }
	   String s="";
	   for(Integer k:v)
	   {
		   s+=String.valueOf(k);
	   }
	   return Integer.valueOf(s);
-------------------------------------------------------------------
Most Frequently Occurring Digit

simple one only use hash to do it

--------------------------------------------------------------------
Decreasing sequence
	   int ct=0,max=0;
	   int temp=0;
	   for(int i=1;i<input2;i++)
	   {
		   if(input1[i-1]>input1[i])
		   {
			   temp+=1;
		   }
		   else
		   {
			   temp+=1;
			   if(temp>1)
			   {
			   if(temp>max){max=temp;}
			   ct+=1;
			   }
			   temp=0;
		   }
	   }
	   if(temp!=0)
	   {
		   ct+=1;
		   temp+=1;
		   if(temp>max)
		   {
			   max=temp;
		   }
	    }
	   Result obj=new Result(ct,max);
	   return obj;
-----------------------------------------------------------------------------
 simple encoded array

 		Vector<Integer> arr=new Vector<>();
		arr.add(input1[input2-1]);
		int pre=input1[input2-1],temp;
		for(int i=input2-2;i>=0;i--)
		{
			temp=input1[i]-pre;
			arr.add(temp);
			pre=temp;
		}
		int s=0,last=0;
		for(Integer i: arr)
		{
          s+=i;
		  last=i;
		}
		Result obj=new Result(last,s);
		return obj;
--------------------------------------------------------------------------------------
Sum of Powers of Digits
		Vector<Integer> arr=new Vector<>();
		while(input1>0)
		{
			arr.add(input1%10);
			input1/=10;
		}
		int prev=0,s=0;
		for(int i=0;i<arr.size();i++)
		{
			s+=(int)Math.pow(arr.get(i),prev);
			prev=arr.get(i);
		}
		return s;
-------------------------------------------------------------------------------------------------
Sum of Sums of Digits in Cyclic order

		String s=String.valueOf(input1);
		int l=s.length(),su=0;
		while(input1>0)
		{
           su+=(input1%10)*l;
		   l--;
		   input1/=10;
		}
		return su;
---------------------------------------------------------------------------------------------
Identify possible words

		input1=input1.toUpperCase();
		String res="";
		String arr[]=input2.split(":");
		int l=input1.length(),ct;
		for(String s:arr)
		{
           if(l==s.length())
		   {
			   s=s.toUpperCase();
			   ct=0;
			   for(int i=0;i<l;i++)
			   {
				   if(s.charAt(i)==input1.charAt(i) || input1.charAt(i)=='_')
				   {
					   ct++;
				   }
			   }
			   if(ct==l){res+=s+":";}
		   }
		}
		if(res!="")
		{
		return res.substring(0,res.length()-1);}
		else{return "ERROR-009";}
-----------------------------------------------------------------------------------------------
encoding three strings

class Okay
{
	public String let(String s)
	{
		int l=s.length();
		if(l%3==0)
		{
			l=l/3;
			return s.substring(0,l)+":"+s.substring(l,2*l)+":"+s.substring(2*l);
		}
		else if(l%3==1)
		{
			l=l/3;
			return s.substring(0,l)+":"+s.substring(l,2*l+1)+":"+s.substring(2*l+1);
		}
		else if(l%3==2)
		{
			l=l/3;
			return s.substring(0,l+1)+":"+s.substring(l+1,2*l+1)+":"+s.substring(2*l+1);
		}
		return "";
	}
}

	    Okay obj=new Okay();
        String s1[]=obj.let(input1).split(":");
		String s2[]=obj.let(input2).split(":");
		String s3[]=obj.let(input3).split(":");
		String r1=s1[0]+s2[0]+s3[0];
		String r2=s1[1]+s2[1]+s3[1];
		String r3=s1[2]+s2[2]+s3[2];
		String res="";
		for(int i=0;i<r3.length();i++)
		{
            if(Character.isUpperCase(r3.charAt(i)))
			{
				res+=Character.toLowerCase(r3.charAt(i));
			}
			 if(Character.isLowerCase(r3.charAt(i)))
			{
				res+=Character.toUpperCase(r3.charAt(i));
			}
		}
		Result rt=new Result(r1,r2,res);
		return rt;

---------------------------------------------------------------------------------------